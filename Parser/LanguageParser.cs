//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMA=2, SINGLE=3, NULL=4, COMPARATOR=5, OPERATOR=6, EXTENDER=7, 
		LPAREN=8, RPAREN=9, LBRACKET=10, RBRACKET=11, LCURLYBRACKET=12, RCURLYBRACKET=13, 
		COLON=14, BOOL=15, STRING=16, FNAME=17, ERRORCHAR=18;
	public const int
		RULE_comparator = 0, RULE_single = 1, RULE_nullval = 2, RULE_vector3 = 3, 
		RULE_string = 4, RULE_bool = 5, RULE_datatype = 6, RULE_numbertype = 7, 
		RULE_alltype = 8, RULE_keyvaluepair = 9, RULE_dict = 10, RULE_list = 11, 
		RULE_lparen = 12, RULE_rparen = 13, RULE_lbracket = 14, RULE_rbracket = 15, 
		RULE_lcurlybracket = 16, RULE_rcurlybracket = 17, RULE_fname = 18, RULE_comparison = 19, 
		RULE_expression = 20, RULE_function = 21, RULE_operator = 22, RULE_math = 23, 
		RULE_extension = 24, RULE_extender = 25, RULE_command = 26;
	public static readonly string[] ruleNames = {
		"comparator", "single", "nullval", "vector3", "string", "bool", "datatype", 
		"numbertype", "alltype", "keyvaluepair", "dict", "list", "lparen", "rparen", 
		"lbracket", "rbracket", "lcurlybracket", "rcurlybracket", "fname", "comparison", 
		"expression", "function", "operator", "math", "extension", "extender", 
		"command"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", null, "'null'", null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMA", "SINGLE", "NULL", "COMPARATOR", "OPERATOR", "EXTENDER", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"COLON", "BOOL", "STRING", "FNAME", "ERRORCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ComparatorContext : ParserRuleContext {
		public ITerminalNode COMPARATOR() { return GetToken(LanguageParser.COMPARATOR, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 0, RULE_comparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(COMPARATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleContext : ParserRuleContext {
		public ITerminalNode SINGLE() { return GetToken(LanguageParser.SINGLE, 0); }
		public SingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSingle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleContext single() {
		SingleContext _localctx = new SingleContext(Context, State);
		EnterRule(_localctx, 2, RULE_single);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(SINGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullvalContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullval; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNullval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNullval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullvalContext nullval() {
		NullvalContext _localctx = new NullvalContext(Context, State);
		EnterRule(_localctx, 4, RULE_nullval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vector3Context : ParserRuleContext {
		public SingleContext[] single() {
			return GetRuleContexts<SingleContext>();
		}
		public SingleContext single(int i) {
			return GetRuleContext<SingleContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Vector3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVector3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVector3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVector3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vector3Context vector3() {
		Vector3Context _localctx = new Vector3Context(Context, State);
		EnterRule(_localctx, 6, RULE_vector3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 60; single();
			State = 61; Match(COMMA);
			State = 62; single();
			State = 63; Match(COMMA);
			State = 64; single();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 8, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 10, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public NullvalContext nullval() {
			return GetRuleContext<NullvalContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public SingleContext single() {
			return GetRuleContext<SingleContext>(0);
		}
		public Vector3Context vector3() {
			return GetRuleContext<Vector3Context>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDatatype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_datatype);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; nullval();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; @string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; @bool();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; single();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74; vector3();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 75; list();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 76; dict();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumbertypeContext : ParserRuleContext {
		public SingleContext single() {
			return GetRuleContext<SingleContext>(0);
		}
		public Vector3Context vector3() {
			return GetRuleContext<Vector3Context>(0);
		}
		public NumbertypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numbertype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNumbertype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNumbertype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumbertype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumbertypeContext numbertype() {
		NumbertypeContext _localctx = new NumbertypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numbertype);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; single();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; vector3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlltypeContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AlltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alltype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAlltype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAlltype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlltype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlltypeContext alltype() {
		AlltypeContext _localctx = new AlltypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_alltype);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; comparison();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; math();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; datatype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyvaluepairContext : ParserRuleContext {
		public AlltypeContext[] alltype() {
			return GetRuleContexts<AlltypeContext>();
		}
		public AlltypeContext alltype(int i) {
			return GetRuleContext<AlltypeContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		public KeyvaluepairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyvaluepair; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterKeyvaluepair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitKeyvaluepair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyvaluepair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyvaluepairContext keyvaluepair() {
		KeyvaluepairContext _localctx = new KeyvaluepairContext(Context, State);
		EnterRule(_localctx, 18, RULE_keyvaluepair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; alltype();
			State = 90; Match(COLON);
			State = 91; alltype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		public LcurlybracketContext lcurlybracket() {
			return GetRuleContext<LcurlybracketContext>(0);
		}
		public RcurlybracketContext rcurlybracket() {
			return GetRuleContext<RcurlybracketContext>(0);
		}
		public KeyvaluepairContext[] keyvaluepair() {
			return GetRuleContexts<KeyvaluepairContext>();
		}
		public KeyvaluepairContext keyvaluepair(int i) {
			return GetRuleContext<KeyvaluepairContext>(i);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 20, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; lcurlybracket();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SINGLE) | (1L << NULL) | (1L << LPAREN) | (1L << LBRACKET) | (1L << LCURLYBRACKET) | (1L << BOOL) | (1L << STRING) | (1L << FNAME))) != 0)) {
				{
				State = 94; keyvaluepair();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 95; Match(COMMA);
					State = 96; keyvaluepair();
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 104; rcurlybracket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		public AlltypeContext[] alltype() {
			return GetRuleContexts<AlltypeContext>();
		}
		public AlltypeContext alltype(int i) {
			return GetRuleContext<AlltypeContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 22, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; lbracket();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SINGLE) | (1L << NULL) | (1L << LPAREN) | (1L << LBRACKET) | (1L << LCURLYBRACKET) | (1L << BOOL) | (1L << STRING) | (1L << FNAME))) != 0)) {
				{
				State = 107; alltype();
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 108; Match(COMMA);
					State = 109; alltype();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 117; rbracket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LparenContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public LparenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lparen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLparen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLparen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLparen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LparenContext lparen() {
		LparenContext _localctx = new LparenContext(Context, State);
		EnterRule(_localctx, 24, RULE_lparen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(LPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RparenContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public RparenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rparen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRparen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRparen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRparen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RparenContext rparen() {
		RparenContext _localctx = new RparenContext(Context, State);
		EnterRule(_localctx, 26, RULE_rparen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LbracketContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public LbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLbracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLbracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLbracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LbracketContext lbracket() {
		LbracketContext _localctx = new LbracketContext(Context, State);
		EnterRule(_localctx, 28, RULE_lbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(LBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RbracketContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public RbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rbracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRbracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRbracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRbracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RbracketContext rbracket() {
		RbracketContext _localctx = new RbracketContext(Context, State);
		EnterRule(_localctx, 30, RULE_rbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LcurlybracketContext : ParserRuleContext {
		public ITerminalNode LCURLYBRACKET() { return GetToken(LanguageParser.LCURLYBRACKET, 0); }
		public LcurlybracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lcurlybracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLcurlybracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLcurlybracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLcurlybracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LcurlybracketContext lcurlybracket() {
		LcurlybracketContext _localctx = new LcurlybracketContext(Context, State);
		EnterRule(_localctx, 32, RULE_lcurlybracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RcurlybracketContext : ParserRuleContext {
		public ITerminalNode RCURLYBRACKET() { return GetToken(LanguageParser.RCURLYBRACKET, 0); }
		public RcurlybracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rcurlybracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRcurlybracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRcurlybracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRcurlybracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RcurlybracketContext rcurlybracket() {
		RcurlybracketContext _localctx = new RcurlybracketContext(Context, State);
		EnterRule(_localctx, 34, RULE_rcurlybracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnameContext : ParserRuleContext {
		public ITerminalNode FNAME() { return GetToken(LanguageParser.FNAME, 0); }
		public FnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnameContext fname() {
		FnameContext _localctx = new FnameContext(Context, State);
		EnterRule(_localctx, 36, RULE_fname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(FNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public LparenContext[] lparen() {
			return GetRuleContexts<LparenContext>();
		}
		public LparenContext lparen(int i) {
			return GetRuleContext<LparenContext>(i);
		}
		public RparenContext[] rparen() {
			return GetRuleContexts<RparenContext>();
		}
		public RparenContext rparen(int i) {
			return GetRuleContext<RparenContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 38, RULE_comparison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				{
				State = 136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 133; function();
					}
					break;
				case 2:
					{
					State = 134; datatype();
					}
					break;
				case 3:
					{
					State = 135; math();
					}
					break;
				}
				State = 138; comparator();
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 139; function();
					}
					break;
				case 2:
					{
					State = 140; datatype();
					}
					break;
				case 3:
					{
					State = 141; math();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 144; function();
					}
					break;
				case 2:
					{
					State = 145; datatype();
					}
					break;
				case 3:
					{
					State = 146; math();
					}
					break;
				}
				State = 149; comparator();
				State = 150; lparen();
				State = 154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 151; function();
					}
					break;
				case 2:
					{
					State = 152; datatype();
					}
					break;
				case 3:
					{
					State = 153; math();
					}
					break;
				}
				State = 156; rparen();
				}
				}
				break;
			case 3:
				{
				{
				State = 158; lparen();
				State = 162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 159; function();
					}
					break;
				case 2:
					{
					State = 160; datatype();
					}
					break;
				case 3:
					{
					State = 161; math();
					}
					break;
				}
				State = 164; rparen();
				State = 165; comparator();
				State = 169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 166; function();
					}
					break;
				case 2:
					{
					State = 167; datatype();
					}
					break;
				case 3:
					{
					State = 168; math();
					}
					break;
				}
				}
				}
				break;
			case 4:
				{
				{
				State = 171; lparen();
				State = 175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 172; function();
					}
					break;
				case 2:
					{
					State = 173; datatype();
					}
					break;
				case 3:
					{
					State = 174; math();
					}
					break;
				}
				State = 177; rparen();
				State = 178; comparator();
				State = 179; lparen();
				State = 183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 180; function();
					}
					break;
				case 2:
					{
					State = 181; datatype();
					}
					break;
				case 3:
					{
					State = 182; math();
					}
					break;
				}
				State = 185; rparen();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LparenContext lparen() {
			return GetRuleContext<LparenContext>(0);
		}
		public RparenContext rparen() {
			return GetRuleContext<RparenContext>(0);
		}
		public ExtensionContext extension() {
			return GetRuleContext<ExtensionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public MathContext math() {
			return GetRuleContext<MathContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 189; extension();
					}
					break;
				case 2:
					{
					State = 190; function();
					}
					break;
				case 3:
					{
					State = 191; comparison();
					}
					break;
				case 4:
					{
					State = 192; math();
					}
					break;
				case 5:
					{
					State = 193; datatype();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 196; lparen();
				State = 202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 197; extension();
					}
					break;
				case 2:
					{
					State = 198; function();
					}
					break;
				case 3:
					{
					State = 199; comparison();
					}
					break;
				case 4:
					{
					State = 200; math();
					}
					break;
				case 5:
					{
					State = 201; datatype();
					}
					break;
				}
				State = 204; rparen();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FnameContext fname() {
			return GetRuleContext<FnameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 42, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; fname();
			State = 209; Match(LPAREN);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SINGLE) | (1L << NULL) | (1L << LPAREN) | (1L << LBRACKET) | (1L << LCURLYBRACKET) | (1L << BOOL) | (1L << STRING) | (1L << FNAME))) != 0)) {
				{
				{
				State = 210; expression();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 211; Match(COMMA);
						State = 212; expression();
						}
						}
						State = 215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA );
					}
				}

				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 224; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(LanguageParser.OPERATOR, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		public LparenContext[] lparen() {
			return GetRuleContexts<LparenContext>();
		}
		public LparenContext lparen(int i) {
			return GetRuleContext<LparenContext>(i);
		}
		public RparenContext[] rparen() {
			return GetRuleContexts<RparenContext>();
		}
		public RparenContext rparen(int i) {
			return GetRuleContext<RparenContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public NumbertypeContext[] numbertype() {
			return GetRuleContexts<NumbertypeContext>();
		}
		public NumbertypeContext numbertype(int i) {
			return GetRuleContext<NumbertypeContext>(i);
		}
		public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 46, RULE_math);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 230;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FNAME:
					{
					State = 228; function();
					}
					break;
				case SINGLE:
					{
					State = 229; numbertype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 232; @operator();
					State = 235;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FNAME:
						{
						State = 233; function();
						}
						break;
					case SINGLE:
						{
						State = 234; numbertype();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==OPERATOR );
				}
				break;
			case 2:
				{
				State = 241; lparen();
				State = 245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 242; function();
					}
					break;
				case 2:
					{
					State = 243; numbertype();
					}
					break;
				case 3:
					{
					State = 244; math();
					}
					break;
				}
				State = 247; rparen();
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 248; @operator();
					State = 251;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FNAME:
						{
						State = 249; function();
						}
						break;
					case SINGLE:
						{
						State = 250; numbertype();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==OPERATOR );
				}
				break;
			case 3:
				{
				State = 259;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FNAME:
					{
					State = 257; function();
					}
					break;
				case SINGLE:
					{
					State = 258; numbertype();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 261; @operator();
					State = 262; lparen();
					State = 266;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 263; function();
						}
						break;
					case 2:
						{
						State = 264; numbertype();
						}
						break;
					case 3:
						{
						State = 265; math();
						}
						break;
					}
					State = 268; rparen();
					}
					}
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==OPERATOR );
				}
				break;
			case 4:
				{
				State = 274; lparen();
				State = 278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 275; function();
					}
					break;
				case 2:
					{
					State = 276; numbertype();
					}
					break;
				case 3:
					{
					State = 277; math();
					}
					break;
				}
				State = 280; rparen();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 281; @operator();
					State = 282; lparen();
					State = 286;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 283; function();
						}
						break;
					case 2:
						{
						State = 284; numbertype();
						}
						break;
					case 3:
						{
						State = 285; math();
						}
						break;
					}
					State = 288; rparen();
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==OPERATOR );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		public ExtenderContext extender() {
			return GetRuleContext<ExtenderContext>(0);
		}
		public LparenContext[] lparen() {
			return GetRuleContexts<LparenContext>();
		}
		public LparenContext lparen(int i) {
			return GetRuleContext<LparenContext>(i);
		}
		public RparenContext[] rparen() {
			return GetRuleContexts<RparenContext>();
		}
		public RparenContext rparen(int i) {
			return GetRuleContext<RparenContext>(i);
		}
		public AlltypeContext[] alltype() {
			return GetRuleContexts<AlltypeContext>();
		}
		public AlltypeContext alltype(int i) {
			return GetRuleContext<AlltypeContext>(i);
		}
		public ExtensionContext extension() {
			return GetRuleContext<ExtensionContext>(0);
		}
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 48, RULE_extension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				{
				State = 296; alltype();
				}
				State = 297; extender();
				{
				State = 298; alltype();
				}
				}
				break;
			case 2:
				{
				State = 300; lparen();
				State = 303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 301; extension();
					}
					break;
				case 2:
					{
					State = 302; alltype();
					}
					break;
				}
				State = 305; rparen();
				State = 306; extender();
				{
				State = 307; alltype();
				}
				}
				break;
			case 3:
				{
				{
				State = 309; alltype();
				}
				State = 310; extender();
				State = 311; lparen();
				State = 314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 312; extension();
					}
					break;
				case 2:
					{
					State = 313; alltype();
					}
					break;
				}
				State = 316; rparen();
				}
				break;
			case 4:
				{
				State = 318; lparen();
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 319; extension();
					}
					break;
				case 2:
					{
					State = 320; alltype();
					}
					break;
				}
				State = 323; rparen();
				State = 324; extender();
				State = 325; lparen();
				{
				State = 326; alltype();
				}
				State = 327; rparen();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtenderContext : ParserRuleContext {
		public ITerminalNode EXTENDER() { return GetToken(LanguageParser.EXTENDER, 0); }
		public ExtenderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extender; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExtender(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExtender(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtender(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtenderContext extender() {
		ExtenderContext _localctx = new ExtenderContext(Context, State);
		EnterRule(_localctx, 50, RULE_extender);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(EXTENDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LanguageParser.Eof, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 52, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; expression();
			State = 334; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x14");
		sb.Append("\x153\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x5\bP\n\b\x3\t\x3\t\x5\tT\n\t\x3\n\x3");
		sb.Append("\n\x3\n\x3\n\x5\nZ\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3");
		sb.Append("\f\a\f\x64\n\f\f\f\xE\fg\v\f\x5\fi\n\f\x3\f\x3\f\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\a\rq\n\r\f\r\xE\rt\v\r\x5\rv\n\r\x3\r\x3\r\x3\xE\x3");
		sb.Append("\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3");
		sb.Append("\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x8B\n");
		sb.Append("\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x91\n\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x5\x15\x96\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x5\x15\x9D\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x5\x15\xA5\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5");
		sb.Append("\x15\xAC\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xB2\n\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xBA\n\x15");
		sb.Append("\x3\x15\x3\x15\x5\x15\xBE\n\x15\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x16\x5\x16\xC5\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x16\x5\x16\xCD\n\x16\x3\x16\x3\x16\x5\x16\xD1\n\x16\x3\x17");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x17\x6\x17\xD8\n\x17\r\x17\xE\x17\xD9");
		sb.Append("\x5\x17\xDC\n\x17\a\x17\xDE\n\x17\f\x17\xE\x17\xE1\v\x17\x3");
		sb.Append("\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\xE9\n\x19\x3");
		sb.Append("\x19\x3\x19\x3\x19\x5\x19\xEE\n\x19\x6\x19\xF0\n\x19\r\x19\xE");
		sb.Append("\x19\xF1\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xF8\n\x19\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x5\x19\xFE\n\x19\x6\x19\x100\n\x19\r\x19");
		sb.Append("\xE\x19\x101\x3\x19\x3\x19\x5\x19\x106\n\x19\x3\x19\x3\x19\x3");
		sb.Append("\x19\x3\x19\x3\x19\x5\x19\x10D\n\x19\x3\x19\x3\x19\x6\x19\x111");
		sb.Append("\n\x19\r\x19\xE\x19\x112\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19");
		sb.Append("\x119\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19");
		sb.Append("\x121\n\x19\x3\x19\x3\x19\x6\x19\x125\n\x19\r\x19\xE\x19\x126");
		sb.Append("\x5\x19\x129\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x5\x1A\x132\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x13D\n\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x144\n\x1A\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x14C\n\x1A\x3\x1B\x3\x1B\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x2\x2\x1D\x2\x4\x6\b\n\f\xE\x10\x12\x14");
		sb.Append("\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x2\x2\x17D\x2");
		sb.Append("\x38\x3\x2\x2\x2\x4:\x3\x2\x2\x2\x6<\x3\x2\x2\x2\b>\x3\x2\x2");
		sb.Append("\x2\n\x44\x3\x2\x2\x2\f\x46\x3\x2\x2\x2\xEO\x3\x2\x2\x2\x10");
		sb.Append("S\x3\x2\x2\x2\x12Y\x3\x2\x2\x2\x14[\x3\x2\x2\x2\x16_\x3\x2\x2");
		sb.Append("\x2\x18l\x3\x2\x2\x2\x1Ay\x3\x2\x2\x2\x1C{\x3\x2\x2\x2\x1E}");
		sb.Append("\x3\x2\x2\x2 \x7F\x3\x2\x2\x2\"\x81\x3\x2\x2\x2$\x83\x3\x2\x2");
		sb.Append("\x2&\x85\x3\x2\x2\x2(\xBD\x3\x2\x2\x2*\xD0\x3\x2\x2\x2,\xD2");
		sb.Append("\x3\x2\x2\x2.\xE4\x3\x2\x2\x2\x30\x128\x3\x2\x2\x2\x32\x14B");
		sb.Append("\x3\x2\x2\x2\x34\x14D\x3\x2\x2\x2\x36\x14F\x3\x2\x2\x2\x38\x39");
		sb.Append("\a\a\x2\x2\x39\x3\x3\x2\x2\x2:;\a\x5\x2\x2;\x5\x3\x2\x2\x2<");
		sb.Append("=\a\x6\x2\x2=\a\x3\x2\x2\x2>?\x5\x4\x3\x2?@\a\x4\x2\x2@\x41");
		sb.Append("\x5\x4\x3\x2\x41\x42\a\x4\x2\x2\x42\x43\x5\x4\x3\x2\x43\t\x3");
		sb.Append("\x2\x2\x2\x44\x45\a\x12\x2\x2\x45\v\x3\x2\x2\x2\x46G\a\x11\x2");
		sb.Append("\x2G\r\x3\x2\x2\x2HP\x5\x6\x4\x2IP\x5\n\x6\x2JP\x5\f\a\x2KP");
		sb.Append("\x5\x4\x3\x2LP\x5\b\x5\x2MP\x5\x18\r\x2NP\x5\x16\f\x2OH\x3\x2");
		sb.Append("\x2\x2OI\x3\x2\x2\x2OJ\x3\x2\x2\x2OK\x3\x2\x2\x2OL\x3\x2\x2");
		sb.Append("\x2OM\x3\x2\x2\x2ON\x3\x2\x2\x2P\xF\x3\x2\x2\x2QT\x5\x4\x3\x2");
		sb.Append("RT\x5\b\x5\x2SQ\x3\x2\x2\x2SR\x3\x2\x2\x2T\x11\x3\x2\x2\x2U");
		sb.Append("Z\x5,\x17\x2VZ\x5(\x15\x2WZ\x5\x30\x19\x2XZ\x5\xE\b\x2YU\x3");
		sb.Append("\x2\x2\x2YV\x3\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\x13\x3");
		sb.Append("\x2\x2\x2[\\\x5\x12\n\x2\\]\a\x10\x2\x2]^\x5\x12\n\x2^\x15\x3");
		sb.Append("\x2\x2\x2_h\x5\"\x12\x2`\x65\x5\x14\v\x2\x61\x62\a\x4\x2\x2");
		sb.Append("\x62\x64\x5\x14\v\x2\x63\x61\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65");
		sb.Append("\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66i\x3\x2\x2\x2g\x65\x3");
		sb.Append("\x2\x2\x2h`\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jk\x5$\x13");
		sb.Append("\x2k\x17\x3\x2\x2\x2lu\x5\x1E\x10\x2mr\x5\x12\n\x2no\a\x4\x2");
		sb.Append("\x2oq\x5\x12\n\x2pn\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2");
		sb.Append("rs\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2um\x3\x2\x2\x2uv\x3");
		sb.Append("\x2\x2\x2vw\x3\x2\x2\x2wx\x5 \x11\x2x\x19\x3\x2\x2\x2yz\a\n");
		sb.Append("\x2\x2z\x1B\x3\x2\x2\x2{|\a\v\x2\x2|\x1D\x3\x2\x2\x2}~\a\f\x2");
		sb.Append("\x2~\x1F\x3\x2\x2\x2\x7F\x80\a\r\x2\x2\x80!\x3\x2\x2\x2\x81");
		sb.Append("\x82\a\xE\x2\x2\x82#\x3\x2\x2\x2\x83\x84\a\xF\x2\x2\x84%\x3");
		sb.Append("\x2\x2\x2\x85\x86\a\x13\x2\x2\x86\'\x3\x2\x2\x2\x87\x8B\x5,");
		sb.Append("\x17\x2\x88\x8B\x5\xE\b\x2\x89\x8B\x5\x30\x19\x2\x8A\x87\x3");
		sb.Append("\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x8C\x3");
		sb.Append("\x2\x2\x2\x8C\x90\x5\x2\x2\x2\x8D\x91\x5,\x17\x2\x8E\x91\x5");
		sb.Append("\xE\b\x2\x8F\x91\x5\x30\x19\x2\x90\x8D\x3\x2\x2\x2\x90\x8E\x3");
		sb.Append("\x2\x2\x2\x90\x8F\x3\x2\x2\x2\x91\xBE\x3\x2\x2\x2\x92\x96\x5");
		sb.Append(",\x17\x2\x93\x96\x5\xE\b\x2\x94\x96\x5\x30\x19\x2\x95\x92\x3");
		sb.Append("\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x94\x3\x2\x2\x2\x96\x97\x3");
		sb.Append("\x2\x2\x2\x97\x98\x5\x2\x2\x2\x98\x9C\x5\x1A\xE\x2\x99\x9D\x5");
		sb.Append(",\x17\x2\x9A\x9D\x5\xE\b\x2\x9B\x9D\x5\x30\x19\x2\x9C\x99\x3");
		sb.Append("\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\x9E\x3");
		sb.Append("\x2\x2\x2\x9E\x9F\x5\x1C\xF\x2\x9F\xBE\x3\x2\x2\x2\xA0\xA4\x5");
		sb.Append("\x1A\xE\x2\xA1\xA5\x5,\x17\x2\xA2\xA5\x5\xE\b\x2\xA3\xA5\x5");
		sb.Append("\x30\x19\x2\xA4\xA1\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3");
		sb.Append("\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x5\x1C\xF\x2\xA7\xAB");
		sb.Append("\x5\x2\x2\x2\xA8\xAC\x5,\x17\x2\xA9\xAC\x5\xE\b\x2\xAA\xAC\x5");
		sb.Append("\x30\x19\x2\xAB\xA8\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA");
		sb.Append("\x3\x2\x2\x2\xAC\xBE\x3\x2\x2\x2\xAD\xB1\x5\x1A\xE\x2\xAE\xB2");
		sb.Append("\x5,\x17\x2\xAF\xB2\x5\xE\b\x2\xB0\xB2\x5\x30\x19\x2\xB1\xAE");
		sb.Append("\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB3");
		sb.Append("\x3\x2\x2\x2\xB3\xB4\x5\x1C\xF\x2\xB4\xB5\x5\x2\x2\x2\xB5\xB9");
		sb.Append("\x5\x1A\xE\x2\xB6\xBA\x5,\x17\x2\xB7\xBA\x5\xE\b\x2\xB8\xBA");
		sb.Append("\x5\x30\x19\x2\xB9\xB6\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xB8");
		sb.Append("\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x5\x1C\xF\x2\xBC\xBE");
		sb.Append("\x3\x2\x2\x2\xBD\x8A\x3\x2\x2\x2\xBD\x95\x3\x2\x2\x2\xBD\xA0");
		sb.Append("\x3\x2\x2\x2\xBD\xAD\x3\x2\x2\x2\xBE)\x3\x2\x2\x2\xBF\xC5\x5");
		sb.Append("\x32\x1A\x2\xC0\xC5\x5,\x17\x2\xC1\xC5\x5(\x15\x2\xC2\xC5\x5");
		sb.Append("\x30\x19\x2\xC3\xC5\x5\xE\b\x2\xC4\xBF\x3\x2\x2\x2\xC4\xC0\x3");
		sb.Append("\x2\x2\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3");
		sb.Append("\x2\x2\x2\xC5\xD1\x3\x2\x2\x2\xC6\xCC\x5\x1A\xE\x2\xC7\xCD\x5");
		sb.Append("\x32\x1A\x2\xC8\xCD\x5,\x17\x2\xC9\xCD\x5(\x15\x2\xCA\xCD\x5");
		sb.Append("\x30\x19\x2\xCB\xCD\x5\xE\b\x2\xCC\xC7\x3\x2\x2\x2\xCC\xC8\x3");
		sb.Append("\x2\x2\x2\xCC\xC9\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3");
		sb.Append("\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x5\x1C\xF\x2\xCF\xD1\x3");
		sb.Append("\x2\x2\x2\xD0\xC4\x3\x2\x2\x2\xD0\xC6\x3\x2\x2\x2\xD1+\x3\x2");
		sb.Append("\x2\x2\xD2\xD3\x5&\x14\x2\xD3\xDF\a\n\x2\x2\xD4\xDB\x5*\x16");
		sb.Append("\x2\xD5\xD6\a\x4\x2\x2\xD6\xD8\x5*\x16\x2\xD7\xD5\x3\x2\x2\x2");
		sb.Append("\xD8\xD9\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2");
		sb.Append("\xDA\xDC\x3\x2\x2\x2\xDB\xD7\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2");
		sb.Append("\xDC\xDE\x3\x2\x2\x2\xDD\xD4\x3\x2\x2\x2\xDE\xE1\x3\x2\x2\x2");
		sb.Append("\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE2\x3\x2\x2\x2");
		sb.Append("\xE1\xDF\x3\x2\x2\x2\xE2\xE3\a\v\x2\x2\xE3-\x3\x2\x2\x2\xE4");
		sb.Append("\xE5\a\b\x2\x2\xE5/\x3\x2\x2\x2\xE6\xE9\x5,\x17\x2\xE7\xE9\x5");
		sb.Append("\x10\t\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE7\x3\x2\x2\x2\xE9\xEF\x3");
		sb.Append("\x2\x2\x2\xEA\xED\x5.\x18\x2\xEB\xEE\x5,\x17\x2\xEC\xEE\x5\x10");
		sb.Append("\t\x2\xED\xEB\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\xF0\x3\x2");
		sb.Append("\x2\x2\xEF\xEA\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xEF\x3\x2");
		sb.Append("\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\x129\x3\x2\x2\x2\xF3\xF7\x5\x1A");
		sb.Append("\xE\x2\xF4\xF8\x5,\x17\x2\xF5\xF8\x5\x10\t\x2\xF6\xF8\x5\x30");
		sb.Append("\x19\x2\xF7\xF4\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2");
		sb.Append("\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFF\x5\x1C\xF\x2\xFA\xFD\x5.");
		sb.Append("\x18\x2\xFB\xFE\x5,\x17\x2\xFC\xFE\x5\x10\t\x2\xFD\xFB\x3\x2");
		sb.Append("\x2\x2\xFD\xFC\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFA\x3\x2");
		sb.Append("\x2\x2\x100\x101\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102");
		sb.Append("\x3\x2\x2\x2\x102\x129\x3\x2\x2\x2\x103\x106\x5,\x17\x2\x104");
		sb.Append("\x106\x5\x10\t\x2\x105\x103\x3\x2\x2\x2\x105\x104\x3\x2\x2\x2");
		sb.Append("\x106\x110\x3\x2\x2\x2\x107\x108\x5.\x18\x2\x108\x10C\x5\x1A");
		sb.Append("\xE\x2\x109\x10D\x5,\x17\x2\x10A\x10D\x5\x10\t\x2\x10B\x10D");
		sb.Append("\x5\x30\x19\x2\x10C\x109\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10C");
		sb.Append("\x10B\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\x5\x1C\xF");
		sb.Append("\x2\x10F\x111\x3\x2\x2\x2\x110\x107\x3\x2\x2\x2\x111\x112\x3");
		sb.Append("\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x129");
		sb.Append("\x3\x2\x2\x2\x114\x118\x5\x1A\xE\x2\x115\x119\x5,\x17\x2\x116");
		sb.Append("\x119\x5\x10\t\x2\x117\x119\x5\x30\x19\x2\x118\x115\x3\x2\x2");
		sb.Append("\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119\x11A\x3");
		sb.Append("\x2\x2\x2\x11A\x124\x5\x1C\xF\x2\x11B\x11C\x5.\x18\x2\x11C\x120");
		sb.Append("\x5\x1A\xE\x2\x11D\x121\x5,\x17\x2\x11E\x121\x5\x10\t\x2\x11F");
		sb.Append("\x121\x5\x30\x19\x2\x120\x11D\x3\x2\x2\x2\x120\x11E\x3\x2\x2");
		sb.Append("\x2\x120\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\x5");
		sb.Append("\x1C\xF\x2\x123\x125\x3\x2\x2\x2\x124\x11B\x3\x2\x2\x2\x125");
		sb.Append("\x126\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2");
		sb.Append("\x127\x129\x3\x2\x2\x2\x128\xE8\x3\x2\x2\x2\x128\xF3\x3\x2\x2");
		sb.Append("\x2\x128\x105\x3\x2\x2\x2\x128\x114\x3\x2\x2\x2\x129\x31\x3");
		sb.Append("\x2\x2\x2\x12A\x12B\x5\x12\n\x2\x12B\x12C\x5\x34\x1B\x2\x12C");
		sb.Append("\x12D\x5\x12\n\x2\x12D\x14C\x3\x2\x2\x2\x12E\x131\x5\x1A\xE");
		sb.Append("\x2\x12F\x132\x5\x32\x1A\x2\x130\x132\x5\x12\n\x2\x131\x12F");
		sb.Append("\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133");
		sb.Append("\x134\x5\x1C\xF\x2\x134\x135\x5\x34\x1B\x2\x135\x136\x5\x12");
		sb.Append("\n\x2\x136\x14C\x3\x2\x2\x2\x137\x138\x5\x12\n\x2\x138\x139");
		sb.Append("\x5\x34\x1B\x2\x139\x13C\x5\x1A\xE\x2\x13A\x13D\x5\x32\x1A\x2");
		sb.Append("\x13B\x13D\x5\x12\n\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13B\x3\x2");
		sb.Append("\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x5\x1C\xF\x2\x13F\x14C");
		sb.Append("\x3\x2\x2\x2\x140\x143\x5\x1A\xE\x2\x141\x144\x5\x32\x1A\x2");
		sb.Append("\x142\x144\x5\x12\n\x2\x143\x141\x3\x2\x2\x2\x143\x142\x3\x2");
		sb.Append("\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\x5\x1C\xF\x2\x146\x147");
		sb.Append("\x5\x34\x1B\x2\x147\x148\x5\x1A\xE\x2\x148\x149\x5\x12\n\x2");
		sb.Append("\x149\x14A\x5\x1C\xF\x2\x14A\x14C\x3\x2\x2\x2\x14B\x12A\x3\x2");
		sb.Append("\x2\x2\x14B\x12E\x3\x2\x2\x2\x14B\x137\x3\x2\x2\x2\x14B\x140");
		sb.Append("\x3\x2\x2\x2\x14C\x33\x3\x2\x2\x2\x14D\x14E\a\t\x2\x2\x14E\x35");
		sb.Append("\x3\x2\x2\x2\x14F\x150\x5*\x16\x2\x150\x151\a\x2\x2\x3\x151");
		sb.Append("\x37\x3\x2\x2\x2)OSY\x65hru\x8A\x90\x95\x9C\xA4\xAB\xB1\xB9");
		sb.Append("\xBD\xC4\xCC\xD0\xD9\xDB\xDF\xE8\xED\xF1\xF7\xFD\x101\x105\x10C");
		sb.Append("\x112\x118\x120\x126\x128\x131\x13C\x143\x14B");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
