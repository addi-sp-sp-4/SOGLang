//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMA=2, SINGLE=3, NULL=4, COMPARATOR=5, OPERATOR=6, EXTENDER=7, 
		LPAREN=8, RPAREN=9, LBRACKET=10, RBRACKET=11, LCURLYBRACKET=12, RCURLYBRACKET=13, 
		COLON=14, BOOL=15, STRING=16, FNAME=17, ERRORCHAR=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "COMMA", "SINGLE", "NULL", "COMPARATOR", "OPERATOR", "EXTENDER", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"COLON", "BOOL", "STRING", "FNAME", "ERRORCHAR"
	};


	public LanguageLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", null, "'null'", null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMA", "SINGLE", "NULL", "COMPARATOR", "OPERATOR", "EXTENDER", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"COLON", "BOOL", "STRING", "FNAME", "ERRORCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x14");
		sb.Append("\x81\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x4\x5\x4/\n\x4\x3\x4\x6\x4\x32\n\x4\r\x4\xE\x4\x33\x3\x4");
		sb.Append("\x3\x4\x6\x4\x38\n\x4\r\x4\xE\x4\x39\x5\x4<\n\x4\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x5\x6L\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b");
		sb.Append("T\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE");
		sb.Append("\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\x5\x10m\n\x10\x3\x11\x3\x11\a\x11q\n\x11");
		sb.Append("\f\x11\xE\x11t\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x6\x12z\n\x12");
		sb.Append("\r\x12\xE\x12{\x5\x12~\n\x12\x3\x13\x3\x13\x2\x2\x14\x3\x3\x5");
		sb.Append("\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B");
		sb.Append("\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\x3\x2\t\x4\x2\f\f\"\"\x3");
		sb.Append("\x2\x32;\x4\x2>>@@\a\x2\'\',-//\x31\x31``\x4\x2\"#%\x80\x6\x2");
		sb.Append("\x43\\\x61\x61\x63|\x80\x80\x6\x2\x32;\x43\\\x61\x61\x63|\x8D");
		sb.Append("\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3");
		sb.Append("\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2");
		sb.Append("\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2");
		sb.Append("\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D");
		sb.Append("\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2");
		sb.Append("\x2\x2%\x3\x2\x2\x2\x3\'\x3\x2\x2\x2\x5+\x3\x2\x2\x2\a.\x3\x2");
		sb.Append("\x2\x2\t=\x3\x2\x2\x2\vK\x3\x2\x2\x2\rM\x3\x2\x2\x2\xFS\x3\x2");
		sb.Append("\x2\x2\x11U\x3\x2\x2\x2\x13W\x3\x2\x2\x2\x15Y\x3\x2\x2\x2\x17");
		sb.Append("[\x3\x2\x2\x2\x19]\x3\x2\x2\x2\x1B_\x3\x2\x2\x2\x1D\x61\x3\x2");
		sb.Append("\x2\x2\x1Fl\x3\x2\x2\x2!n\x3\x2\x2\x2#w\x3\x2\x2\x2%\x7F\x3");
		sb.Append("\x2\x2\x2\'(\t\x2\x2\x2()\x3\x2\x2\x2)*\b\x2\x2\x2*\x4\x3\x2");
		sb.Append("\x2\x2+,\a.\x2\x2,\x6\x3\x2\x2\x2-/\a/\x2\x2.-\x3\x2\x2\x2.");
		sb.Append("/\x3\x2\x2\x2/\x31\x3\x2\x2\x2\x30\x32\t\x3\x2\x2\x31\x30\x3");
		sb.Append("\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3");
		sb.Append("\x2\x2\x2\x34;\x3\x2\x2\x2\x35\x37\a\x30\x2\x2\x36\x38\t\x3");
		sb.Append("\x2\x2\x37\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x37\x3\x2");
		sb.Append("\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;\x35\x3\x2\x2\x2;<\x3");
		sb.Append("\x2\x2\x2<\b\x3\x2\x2\x2=>\ap\x2\x2>?\aw\x2\x2?@\an\x2\x2@\x41");
		sb.Append("\an\x2\x2\x41\n\x3\x2\x2\x2\x42L\t\x4\x2\x2\x43\x44\a@\x2\x2");
		sb.Append("\x44L\a?\x2\x2\x45\x46\a>\x2\x2\x46L\a?\x2\x2GH\a?\x2\x2HL\a");
		sb.Append("?\x2\x2IJ\a#\x2\x2JL\a?\x2\x2K\x42\x3\x2\x2\x2K\x43\x3\x2\x2");
		sb.Append("\x2K\x45\x3\x2\x2\x2KG\x3\x2\x2\x2KI\x3\x2\x2\x2L\f\x3\x2\x2");
		sb.Append("\x2MN\t\x5\x2\x2N\xE\x3\x2\x2\x2OP\a(\x2\x2PT\a(\x2\x2QR\a~");
		sb.Append("\x2\x2RT\a~\x2\x2SO\x3\x2\x2\x2SQ\x3\x2\x2\x2T\x10\x3\x2\x2");
		sb.Append("\x2UV\a*\x2\x2V\x12\x3\x2\x2\x2WX\a+\x2\x2X\x14\x3\x2\x2\x2");
		sb.Append("YZ\a]\x2\x2Z\x16\x3\x2\x2\x2[\\\a_\x2\x2\\\x18\x3\x2\x2\x2]");
		sb.Append("^\a}\x2\x2^\x1A\x3\x2\x2\x2_`\a\x7F\x2\x2`\x1C\x3\x2\x2\x2\x61");
		sb.Append("\x62\a<\x2\x2\x62\x1E\x3\x2\x2\x2\x63\x64\av\x2\x2\x64\x65\a");
		sb.Append("t\x2\x2\x65\x66\aw\x2\x2\x66m\ag\x2\x2gh\ah\x2\x2hi\a\x63\x2");
		sb.Append("\x2ij\an\x2\x2jk\au\x2\x2km\ag\x2\x2l\x63\x3\x2\x2\x2lg\x3\x2");
		sb.Append("\x2\x2m \x3\x2\x2\x2nr\a$\x2\x2oq\t\x6\x2\x2po\x3\x2\x2\x2q");
		sb.Append("t\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tr\x3");
		sb.Append("\x2\x2\x2uv\a$\x2\x2v\"\x3\x2\x2\x2w}\t\a\x2\x2xz\t\b\x2\x2");
		sb.Append("yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3");
		sb.Append("\x2\x2\x2}y\x3\x2\x2\x2}~\x3\x2\x2\x2~$\x3\x2\x2\x2\x7F\x80");
		sb.Append("\v\x2\x2\x2\x80&\x3\x2\x2\x2\r\x2.\x33\x39;KSlr{}\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
